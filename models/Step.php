<?php
namespace app\models;
use app\models\query\StepQuery;
use yii\db\ActiveRecord;
use app\models\query\SponsorQuery;

/**
* @property  $daily_status integer
* @property  integer|null $clone
* @property  UserClone $cloneOne
* @property  DailyMoney $daily
* @property  Step[] $sponsors
* @property  StepUsers[] $stepsUsers
 */
class Step extends ActiveRecord
{
    const DAILY_STATUS = 1;
    const STATUS_PROCESSING  = 0;
    const STATUS_CLOSURES  = 1;
    public static function tableName()
    {
        return 'step';
    }
    public function rules()
    {
        return [
            [['user_id','step', 'daily_status'], 'safe'],
            [['clone'], 'integer'],
        ];
    }
    public static function stepka()
    {
        return new SponsorQuery(get_called_class());
    }


    public static function findOneNotDaily($where)
    {
        return self::find()->whereNotDaily()->andWhere($where)->one(); // TODO: Change the autogenerated stub
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCloneOne() {
        return $this->hasOne(UserClone::className(), ['id' => 'clone']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDaily() {
        return $this->hasOne(DailyMoney::className(), ['id' => 'step']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSponsors() {
        return $this->hasMany(Step::className(), ['sponsor_id' => 'owner_id'])->andWhere(['!=', 'owner_id', $this->owner_id]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSponsorss() {
        return $this->hasMany(Step::className(), ['owner_id' => 'sponsor_id'])->andWhere(['!=', 'sponsor_id', $this->sponsor_id]);
    }

    /**
     * @param bool $userId
     * @return \yii\db\ActiveQuery
     */
    public function GetStepsUsers($userId = false) {
      if(!$userId) {
          $userId = \Yii::$app->user->id;
      }
        return $this->getStepsUsersQuery()->andWhere(['seven' => $userId]);
    }

    public function getStepsUsersQuery() {
        return $this->hasMany(StepUsers::className(), ['step_id' => 'id']);
    }


    /**
     * {@inheritdoc}
     * @return StepQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new StepQuery(get_called_class());
    }
}

<?php

namespace app\controllers;

use app\commands\MyClass;
use app\models\DailyMoney;
use app\models\DailyMoneyEur;
use app\models\RegisterForm;
use app\models\SetUserInStep;
use app\models\Step;
use app\models\StepEur;
use app\models\StepForm;
use app\models\StepFormEur;
use app\models\StepUsers;
use app\models\UploadForm;
use app\models\User;
use app\models\AdmSetting;
use app\models\ProfileUser;
use app\models\UserClone;
use app\models\UserCloneEur;
use app\models\UserWithdraw;
use app\models\UserNews;
use app\models\FeedBackMod;
use app\models\DialogFeed;
use app\models\UserLogs;
use app\models\TransferUser;
use phpDocumentor\Reflection\DocBlock\Tags\Var_;
use Yii;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\helpers\ArrayHelper;
use yii\web\Controller;
use yii\helpers\Url;

use app\models\CountrySelect;
use app\models\CitySelect;
use app\models\RegionSelect;

use app\models\UserLink;
use app\models\LoginForm;

use yii\web\NotFoundHttpException;
use yii\web\UploadedFile;
use yii\web\Response;

class UserController extends Controller
{
	/**
	 * {@inheritdoc}
	 */
	public function behaviors()
	{
		return [
			'access' => [
				'class' => AccessControl::className(),
				'only' => ['daily-money'],
				'rules' => [
					[
						'actions' => ['daily-money'],
						'allow' => true,
						'roles' => ['@'],
					],
				],
				'denyCallback' => function ($rule, $action) {
					return Yii::$app->response->redirect(['/']);
				},
			],
		];
	}

	public function beforeAction($action)
	{

		return parent::beforeAction($action); // TODO: Change the autogenerated stub
	}

	public $layout = "green_main";

	public function actionIndex()
	{
		if (Yii::$app->user->isGuest) {
			return $this->redirect(URL::to(['/green/index']));
		}
		$get_country = CountrySelect::find()
			->select(['name', 'id'])
			->indexBy('id')->column();

		$get_region = RegionSelect::find()
			->select(['name', 'id'])
			->where(['country_id' => Yii::$app->user->identity->country])
			->indexBy('id')->column();

		$get_city = CitySelect::find()
			->select(['name', 'id'])
			->where(['region_id' => Yii::$app->user->identity->region])
			->indexBy('id')->column();


		if (Yii::$app->request->isAjax) {
			if (Yii::$app->request->post('email', -1) == 'send') {
				$email = Yii::$app->user->identity->email;
				$key = rand(11111, 99999);
				$session = Yii::$app->session;
				if (!$session->isActive) $session->open();
				$session->set('key', $key);
				$session->close();

				Yii::$app->mailer->compose()
					->setFrom('noreply@lcgreenlife.com')
					->setTo($email)
					->setSubject('Смена почты на GreenLife')
					->setTextBody('Код подтверждения Email')
					->setHtmlBody('<b>Код подтверждения Email:</b> ' . $key)
					->send();
			}
			if (Yii::$app->request->post('country', -1) != -1) {
				$country = Yii::$app->request->post();

				$get_region = RegionSelect::find()
					->select(['name', 'id'])
					->where(['country_id' => $country])
					->all();

				foreach ($get_region as $post) {

					echo "<option value='" . $post->id . "'>" . $post->name . "</option>";
				}
			}
			if (Yii::$app->request->post('region', -1) != -1) {
				$region = Yii::$app->request->post();

				$get_city = CitySelect::find()
					->select(['name', 'id'])
					->where(['region_id' => $region])
					->orderBy('id DESC')->all();

				foreach ($get_city as $post) {

					echo "<option value='" . $post->id . "'>" . $post->name . "</option>";
				}
			}
			exit;
		}

		$model = UploadForm::findOne(['id' => Yii::$app->user->identity->id]);
		if ($model->load(Yii::$app->request->post())) {
			$session = Yii::$app->session;
			if (!$session->isActive) $session->open();
			$model->EmailCodeCheck = $session->get('key');
			$session->destroy();

			if ($model->validate()) {
				$model->save();

				$model->file = UploadedFile::getInstance($model, 'file');
				if ($model->file && $model->validate()) {
					$filis = 'uploads/' . $model->file->baseName . rand(0, 123456789) . '.' . $model->file->extension;
					if ($filis) {
						$model->avatar = $filis;
						$model->save();
					}
					$model->file->saveAs($filis);
				}
				$this->refresh();

				$pass = $model->password;
				if ($pass) {
					$model->pass = password_hash($pass, PASSWORD_DEFAULT);
					$model->save();
					Yii::$app->user->logout();
					return $this->render('/green/index');
				}
			}
		}
		$priv_sett = ProfileUser::findOne(['user_id' => Yii::$app->user->identity->id]);
		if (is_null($priv_sett)) $priv_sett = new ProfileUser();
		if ($priv_sett->load(Yii::$app->request->post())) $priv_sett->save();
		return $this->render('index', [
			'model' => $model,
			'get_country' => $get_country,
			'get_region' => $get_region,
			'get_city' => $get_city,
			'priv_sett' => $priv_sett
		]);
	}

	public function actionTeam()
	{
		if (Yii::$app->user->isGuest) {
			return $this->redirect(URL::to(['/green/index']));
		}
		$step_place = array(3, 3, 7, 3, 7, 3, 7, 7, 3, 7);
		$step_name = array('ПРЕДСТАРТ 1', 'ПРЕДСТАРТ 2', '1 Цикл', 'Бонус', '2 ЦИКЛ', 'Gold', '3 ЦИКЛ', '4 ЦИКЛ', 'Platinum', '5 ЦИКЛ');

		$teamed = Step::findOne(['owner_id' => Yii::$app->user->identity->id, 'step' => Yii::$app->user->identity->step]);

		if (is_null($teamed)) $buyed = 0;
		else $buyed = 1;

		if ($buyed)
			$check = StepUsers::find()
				->select(['step_id', 'user_id', 'id'])
				->where(['step_id' => $teamed->id])
				->andWhere(['<>', 'user_id', Yii::$app->user->identity->id])
				->andWhere(['seven' => 0])
				->all();
		else $check = 0;

		$step_name = $step_name[Yii::$app->user->identity->step];

		return $this->render('team', [
			'teamed' => $check,
			'buyed' => $buyed,
			'step_name' => $step_name,
			'step_place' => $step_place,
			'mon_step' => $teamed ? $teamed->id : null
		]);
	}

	public function actionMonitoringOld()
	{

		if (Yii::$app->user->isGuest) {
			return $this->redirect(URL::to(['/green/index']));
		}

		$all = User::sponsor()
			->select(['id', 'email', 'skype', 'phone', 'dateReg', 'sponsor', 'username', 'name', 'surname', 'father'])
			->getReferals(Yii::$app->user->identity->username)->orderBy(['id' => SORT_ASC])
			->all();

		$step_name = array('ПРЕДСТАРТ 1', 'ПРЕДСТАРТ 2', '1 Цикл', 'Бонус', '2 ЦИКЛ', 'Gold', '3 ЦИКЛ', '4 ЦИКЛ', 'Platinum', '5 ЦИКЛ');
		$step_price = array(1500, 3000, 4000, 10000, 15000, 40000, 50000, 150000, 400000, 500000);
		$step_place = array(3, 3, 7, 3, 7, 3, 7, 7, 3, 7);

		$step_give = array(3000, 6000, 12000, 20000, 55000, 80000, 180000, 550000, 750000, 150000);
		$step_freeze = array(3000, 4000, 10000, 15000, 40000, 50000, 150000, 400000, 500000, 0);

		$buyed = Step::find()
			->select(['owner_id', 'step', 'id'])
			->where(['owner_id' => Yii::$app->user->identity->id])
			->limit(10);

		$teamed = $buyed->all();
		$buyed = $buyed->count();
		if (is_null($buyed)) $buyed = 0;

		if (Yii::$app->request->isAjax) {
			if (Yii::$app->request->post('search', -1) == 1) {
				$login = Yii::$app->request->post('login');
				$fio = Yii::$app->request->post('fio');
				$sponsor = Yii::$app->request->post('sponsor');
				$phone = Yii::$app->request->post('phone');
				$emails = Yii::$app->request->post('emails');
				$dreg = Yii::$app->request->post('dreg');
				$status = Yii::$app->request->post('status');

				$print = '';
				$teams = null;
				$name = explode(' ', $fio);
				if ($status == 0):
					$teams = User::sponsor()
						->select(['dateReg', 'username', 'name', 'surname', 'father', 'email', 'skype', 'phone'])
						->getReferals(Yii::$app->user->identity->username)->orderBy(['id' => SORT_DESC])
						->filterWhere([
							'username' => $login,
							'sponsor' => $sponsor,
							'phone' => $phone,
							'emails' => $emails,
							'dateReg' => $dreg,
							'name' => @$name[0],
							'surname' => @$name[1],
							'father' => @$name[2],
						]);
					$session = Yii::$app->session;
					if (!$session->isActive) $session->open();
					$session->set('search_page1', $teams);
					$session->close();
					$print = 'page1';

				elseif ($status == 1 || $status == 2):
					$teams = User::sponsor()
						->select(['id'])
						->getReferals(Yii::$app->user->identity->username)->orderBy(['id' => SORT_DESC])
						->filterWhere([
							'username' => $login,
							'sponsor' => $sponsor,
							'phone' => $phone,
							'emails' => $emails,
							'dateReg' => $dreg,
							'name' => @$name[0],
							'surname' => @$name[1],
							'father' => @$name[2],
						])
						->all();
					$users = array();
					$nousers = array();
					foreach ($teams as $team) {
						if (Step::findOne([
							'owner_id' => $team->id
						])) $users[] = $team->id;
						else $nousers[] = $team->id;
					}

					if ($status == 1) {
						$teams = User::sponsor()
							->select(['dateReg', 'id', 'username', 'name', 'surname', 'father', 'email', 'skype', 'phone'])
							->andWhere(['id' => $users])->orderBy(['id' => SORT_DESC])
							->filterWhere([
								'username' => $login,
								'sponsor' => $sponsor,
								'phone' => $phone,
								'emails' => $emails,
								'dateReg' => $dreg,
								'name' => @$name[0],
								'surname' => @$name[1],
								'father' => @$name[2],
							]);
						$session = Yii::$app->session;
						if (!$session->isActive) $session->open();
						$session->set('search_page2', $teams);
						$session->close();
						$print = 'page2';

					}
					if ($status == 2) {
						$teams = User::sponsor()
							->select(['dateReg', 'id', 'username', 'name', 'surname', 'father', 'email', 'skype', 'phone'])
							->andWhere(['id' => $nousers])->orderBy(['id' => SORT_DESC])
							->filterWhere([
								'username' => $login,
								'sponsor' => $sponsor,
								'phone' => $phone,
								'emails' => $emails,
								'dateReg' => $dreg,
								'name' => @$name[0],
								'surname' => @$name[1],
								'father' => @$name[2],
							]);
						$session = Yii::$app->session;
						if (!$session->isActive) $session->open();
						$session->set('search_page3', $teams);
						$session->close();
						$print = 'page3';
					}
				endif;
				$dataProvider = new \yii\data\ActiveDataProvider([
					'query' => $teams,
					'sort' => false,
					'pagination' => [
						'pageSize' => 25,
						'pageParam' => $print,
					],
				]);
				return \yii\grid\GridView::widget([
					'dataProvider' => $dataProvider,
					'columns' => [
						['label' => 'Дата регистрации', 'attribute' => 'dateReg'],
						['label' => 'Логин', 'attribute' => 'username'],
						[
							'label' => 'ФИО',
							'value' => function ($data) {
								return $data->name . ' ' . $data->surname . ' ' . $data->father;
							},
						],
						['label' => 'E-mail', 'attribute' => 'email'],
						['label' => 'Телефон', 'attribute' => 'phone'],
						['label' => 'Skype', 'attribute' => 'skype'],
						['label' => 'Рефералов', 'value' => function ($data) {
							$count = User::find()
								->where(['sponsor' => $data->username])
								->count();
							return $count;
						}
						]
					]
				]);
				exit();
			}
			if (Yii::$app->request->post('number', -1) != -1) {

				$num = Yii::$app->request->post('number');
				if ($num < 0 || $num > 10) exit();
				$step = Step::findOne([
					'owner_id' => Yii::$app->user->identity->id,
					'step' => $num
				]);
				if (is_null($step)) exit();
				$model = User::findOne(['id' => Yii::$app->user->identity->id]);
				$model->step_mon = $num;
				$model->save();
			}

			if (Yii::$app->request->post('email', -1) == 'send') {
				$email = Yii::$app->user->identity->email;
				$key = rand(11111, 99999);
				$session = Yii::$app->session;
				if (!$session->isActive) $session->open();
				$session->set('key', $key);
				$session->close();

				Yii::$app->mailer->compose()
					->setFrom('noreply@lcgreenlife.com')
					->setTo($email)
					->setSubject('Вступление в цикл на GreenLife')
					->setTextBody('Код подтверждения Email')
					->setHtmlBody('<b>Код подтверждения Email:</b> ' . $key)
					->send();

				exit();
			}
			exit();
		}
		// custom
		if (Yii::$app->request->post('set_player')) {
			$model = new SetUserInStep();
			if ($model->load(Yii::$app->request->post()) && $model->validate()) {
				$user_id = Yii::$app->request->post('set_user');

				$username = str_replace(' ', '', $model->username);
				$spons = str_replace("AA", "", $username);
				$username = mb_strtolower($spons);
				$username = 'AA' . $username;

				$user_set = User::findOne(['username' => $username]);
				$user = User::findOne(['id' => $user_id]);

				if (!is_null($user)) $steps = Step::findOne([
					'owner_id' => $user->id,
					'step' => Yii::$app->user->identity->step_mon
				]);
				else $steps = null;

				if ($step_place[Yii::$app->user->identity->step_mon] == 7) $check = StepUsers::find()
					->select(['step_id', 'user_id', 'id'])
					->where(['step_id' => $steps->id])
					->count();

				if ($steps->status == 1 || $check >= 2) {
					Yii::$app->session->setFlash('message', 'У спонсора указанный цикл уже закрыт!');
				} else if (is_null($steps) || $user->id == $user_set->id || is_null($user_set) || is_null($user)) Yii::$app->session->setFlash('message', 'Указанный пользователь не состоит в цикле!');
				else {

					$model = new StepForm();
					$model->user_id = $user_set->id;
					$model->step_id = $steps->id;
					$model->sponsor_id = $user_id;
					$model->sponsor = 'Custom Set';
					$model->save(false);
					//Проверка на количество участников и закрытие цикла спонсора
					$check = StepUsers::find()
						->select(['step_id', 'user_id', 'id'])
						->where(['step_id' => $steps->id])
						->count();

					if ($check >= $step_place[Yii::$app->user->identity->step_mon] - 1) {
						$user = User::findOne(['id' => $steps->owner_id]);
						$user->lc = $user->lc + $step_give[Yii::$app->user->identity->step_mon];
						$user->freeze = $step_freeze[Yii::$app->user->identity->step_mon];
						$user->save();

						$steps->status = 1;
						$steps->save();
					}
				}
			}
			$this->refresh();
		}

		//
		$model = new StepForm();
		$session = Yii::$app->session;
		if (!$session->isActive) $session->open();
		$model->emailCodeCheck = $session->get('key');
		$session->close();
		if ($model->load(Yii::$app->request->post())) {
			if ($model->validate()) {
				if (Yii::$app->request->post('number', -1) != -1) {
					$num = Yii::$app->request->post('number');
					if ($num < 0 || $num > 10) exit();
					$step = Step::findOne([
						'owner_id' => Yii::$app->user->identity->id,
						'step' => $num
					]);
					if (is_null($step)) {
						if ($buyed)
							$check = Step::findOne([
								'owner_id' => Yii::$app->user->identity->id,
								'step' => Yii::$app->user->identity->step]);
						else $check = null;
						//
						$sponsor = str_replace(' ', '', $model->sponsor);
						$spons = str_replace("AA", "", $sponsor);
						$sponsor = mb_strtolower($spons);
						$sponsor = 'AA' . $sponsor;
						$model->sponsor = $sponsor;
						//
						$user = User::findOne(['username' => $model->sponsor]);
						if (!is_null($user)) $steps = Step::findOne([
							'owner_id' => $user->id,
							'step' => $num
						]);
						else $steps = null;
						if ($step_price[$num] > Yii::$app->user->identity->lc) {
							Yii::$app->session->setFlash('message', 'У вас недостаточно средств для вступления в цикл!');
						} else if (!is_null($check) && $check->status != 1) {
							Yii::$app->session->setFlash('message', 'Текущий цикл полностью не заполнен!');
						} else if (is_null($steps) || $model->sponsor == Yii::$app->user->identity->username) Yii::$app->session->setFlash('message', 'Указанный спонсор не состоит в цикле!');
						else if ($steps->status == 1) {
							Yii::$app->session->setFlash('message', 'У данного спонсора указанный цикл уже закрыт!');
						} else {

							//создание цикла пользователя
							$step = new Step();
							$step->owner_id = Yii::$app->user->identity->id;
							$step->step = $num;
							$step->sponsor = $model->sponsor;
							$step->sponsor_id = $user->id;
							$step->save();

							//поиск спонсора указанного пользователем
							// $user = User::findOne(['username' => $model->sponsor]);
							$steps = Step::findOne([
								'owner_id' => $user->id,
								'step' => $num
							]);
							if (is_null($steps)) $steps_id = -1;
							else $steps_id = $steps->id;

							//step_user
							if ($steps_id != -1) {
								$model->user_id = Yii::$app->user->identity->id;
								$model->step_id = $steps_id;
								$model->sponsor_id = $user->id;
								$model->save();

								$seven = Step::findOne([
									'owner_id' => $steps->sponsor_id,
									'step' => $num
								]);
								if ($step_place[$num] == 7 && !is_null($seven)) {
									if (is_null($seven)) $seven_id = $steps_id;
									else $seven_id = $seven->id;

									$sevStep = new StepForm();
									$sevStep->user_id = Yii::$app->user->identity->id;
									$sevStep->step_id = $seven_id;
									$sevStep->sponsor_id = $user->id;
									$sevStep->sponsor = 'Seven';
									$sevStep->seven = $steps->owner_id;
									$sevStep->save(false);

									//Проверка на количество участников и закрытие цикла спонсора
									$check = StepUsers::find()
										->select(['step_id', 'user_id', 'id'])
										->where(['step_id' => $seven_id])
										->count();

									if ($check >= $step_place[$num] - 1) {
										$user = User::findOne(['id' => $seven->owner_id]);
										$user->lc = $user->lc + $step_give[$num];
										$user->freeze = $step_freeze[$num];
										$user->save();

										$seven->status = 1;
										$seven->save();

										//логирование
										$logs = new UserLogs();
										$logs->type = 0;
										$logs->user_id = $seven->owner_id;
										$logs->date = date("Y-m-d H:i:s");
										$logs->object = 'Счёт';
										$logs->action = 'Закрытия цикла';
										$logs->sum = $step_give[$num];
										$logs->save();
									}
								}
							}

							//Проверка на количество участников и закрытие цикла спонсора
							$check = StepUsers::find()
								->select(['step_id', 'user_id', 'id'])
								->where(['step_id' => $steps_id])
								->count();

							if ($check >= $step_place[$num] - 1) {
								$user = User::findOne(['id' => $steps->owner_id]);
								$user->lc = $user->lc + $step_give[$num];
								$user->freeze = $step_freeze[$num];
								$user->save();

								$steps->status = 1;
								$steps->save();

								//логирование
								$logs = new UserLogs();
								$logs->type = 0;
								$logs->user_id = $steps->owner_id;
								$logs->date = date("Y-m-d H:i:s");
								$logs->object = 'Счёт';
								$logs->action = 'Закрытия цикла';
								$logs->sum = $step_give[$num];
								$logs->save();
							}
							//обновление баланаса пользователя
							$model = User::findOne(['id' => Yii::$app->user->identity->id]);
							$model->freeze = 0;
							$model->lc = $model->lc - $step_price[$num];
							$model->step = $num;
							$model->step_mon = $num;
							$model->save();

							//логирование
							$logs = new UserLogs();
							$logs->type = 0;
							$logs->user_id = Yii::$app->user->identity->id;
							$logs->date = date("Y-m-d H:i:s");
							$logs->object = 'Счёт';
							$logs->action = 'Вступление в цикл';
							$logs->sum = -$step_price[$num];
							$logs->save();

							$this->refresh();
						}
					} else {
						$model = User::findOne(['id' => Yii::$app->user->identity->id]);
						$model->step_mon = $num;
						$model->save();
					}
				}
			} else Yii::$app->session->setFlash('message', 'Неверно введены данные!');
		}
		$model = new StepForm();
		$step_user = -1;
		$step_mon = -1;
		foreach ($teamed as $team) {
			if ($team->step == Yii::$app->user->identity->step) {
				$step_user = $team->id;
			}
			if ($team->step == Yii::$app->user->identity->step_mon) {
				$step_mon = $team->id;
			}
			if ($step_user != -1 && $step_mon != -1) break;
		}
		if ($buyed)
			$check = StepUsers::find()
				->select(['step_id', 'user_id', 'id'])
				->where(['step_id' => $step_user])
				->andWhere(['<>', 'user_id', Yii::$app->user->identity->id])
				->andWhere(['seven' => 0])
				->all();
		else $check = 0;

		/*if(Yii::$app->user->identity->role == 0)
		  $all_users_step = Step::find()->select(['id','owner_id'])
			->where(['sponsor' => Yii::$app->user->identity->username, 'step' => Yii::$app->user->identity->step_mon])
			->all();

	   else*/
		$all_users_step = Step::stepka()
			->where(['step' => Yii::$app->user->identity->step_mon])
			->andWhere(['<>', 'owner_id', Yii::$app->user->identity->id])
			->andWhere(['status' => 0])
			//->getSteps(Yii::$app->user->identity->id)->orderBy(['id' => SORT_ASC])
			->all();

		$out_user = Step::stepka()
			->where(['step' => Yii::$app->user->identity->step_mon])
			->andWhere(['status' => 1])
			//->getSteps(Yii::$app->user->identity->id)->orderBy(['id' => SORT_ASC])
			->all();

		$out = Step::findOne([
			'owner_id' => Yii::$app->user->identity->id,
			'status' => 0,
			'step' => Yii::$app->user->identity->step_mon
		]);


		$user_set = new SetUserInStep();

		return $this->render('mon', [
			'model' => $model,
			'all' => $all,
			'buyed' => $teamed,
			'teamed' => $check,
			'step_name' => $step_name,
			'step_price' => $step_price,
			'step_place' => $step_place,
			'users_step' => $all_users_step,
			'user_set' => $user_set,
			'out' => $out,
			'out_user' => $out_user,
			'mon_step' => $step_mon
		]);
	}

	public function actionMonitoring()
	{
		if (Yii::$app->user->isGuest) {
			return $this->redirect(URL::to(['/green/index']));
		}

		$all = User::sponsor()
			->select(['id', 'email', 'skype', 'phone', 'dateReg', 'sponsor', 'username', 'name', 'surname', 'father'])
			->getReferals(Yii::$app->user->identity->username)->orderBy(['id' => SORT_ASC])
			->all();
		if (\app\commands\MyClass::myIp()) {
//            \app\commands\MyClass::print_r(count($all));
		}
		$step_name = array('ПРЕДСТАРТ 1', 'ПРЕДСТАРТ 2', '1 Цикл', 'Бонус', '2 ЦИКЛ', 'Gold', '3 ЦИКЛ', '4 ЦИКЛ', 'Platinum', '5 ЦИКЛ');
		$step_price = array(1500, 3000, 4000, 10000, 15000, 40000, 50000, 150000, 400000, 500000);
		$step_place = array(3, 3, 7, 3, 7, 3, 7, 7, 3, 7);

		$step_give = array(3000, 6000, 12000, 20000, 55000, 80000, 180000, 550000, 750000, 150000);
		$step_freeze = array(3000, 4000, 10000, 15000, 40000, 50000, 150000, 400000, 500000, 0);

		$buyed = Step::find()
			->select(['owner_id', 'step', 'id'])
			->where(['owner_id' => Yii::$app->user->identity->id])
			->whereNotDaily(true)
			->limit(10);

		$teamed = $buyed->all();
		$buyed = $buyed->count();
		if (is_null($buyed)) $buyed = 0;

		if (Yii::$app->request->isAjax) {
			if (Yii::$app->request->post('search', -1) == 1) {
				$login = Yii::$app->request->post('login');
				$fio = Yii::$app->request->post('fio');
				$sponsor = Yii::$app->request->post('sponsor');
				$phone = Yii::$app->request->post('phone');
				$emails = Yii::$app->request->post('emails');
				$dreg = Yii::$app->request->post('dreg');
				$status = Yii::$app->request->post('status');

				$print = '';
				$teams = null;
				$name = explode(' ', $fio);
				if ($status == 0):

					$teams = User::sponsor()
						->select(['daily_step', 'dateReg', 'username', 'name', 'surname', 'father', 'email', 'skype', 'phone'])
						->getReferals(Yii::$app->user->identity->username)->orderBy(['id' => SORT_DESC])
						->filterWhere([
							'username' => $login,
							'sponsor' => $sponsor,
							'phone' => $phone,
							'emails' => $emails,
							'dateReg' => $dreg,
							'name' => @$name[0],
							'surname' => @$name[1],
							'father' => @$name[2],
						]);
					$session = Yii::$app->session;
					if (!$session->isActive) $session->open();
					$session->set('search_page1', $teams);
					$session->close();
					$print = 'page1';

				elseif ($status == 1 || $status == 2):
					$teams = User::sponsor()
						->select(['id'])
						->getReferals(Yii::$app->user->identity->username)->orderBy(['id' => SORT_DESC])
						->filterWhere([
							'username' => $login,
							'sponsor' => $sponsor,
							'phone' => $phone,
							'emails' => $emails,
							'dateReg' => $dreg,
							'name' => @$name[0],
							'surname' => @$name[1],
							'father' => @$name[2],
						])
						->all();
					$users = array();
					$nousers = array();
					foreach ($teams as $team) {
						if (Step::findOneNotDaily([
							'owner_id' => $team->id
						])) $users[] = $team->id;
						else $nousers[] = $team->id;
					}

					if ($status == 1) {
						$teams = User::sponsor()->whereNotDaily(true)
							->select(['dateReg', 'id', 'username', 'name', 'surname', 'father', 'email', 'skype', 'phone'])
							->andWhere(['id' => $users])->orderBy(['id' => SORT_DESC])
							->filterWhere([
								'username' => $login,
								'sponsor' => $sponsor,
								'phone' => $phone,
								'emails' => $emails,
								'dateReg' => $dreg,
								'name' => @$name[0],
								'surname' => @$name[1],
								'father' => @$name[2],
							]);
						$session = Yii::$app->session;
						if (!$session->isActive) $session->open();
						$session->set('search_page2', $teams);
						$session->close();
						$print = 'page2';

					}
					if ($status == 2) {
						$teams = User::sponsor()->whereNotDaily(true)
							->select(['dateReg', 'id', 'username', 'name', 'surname', 'father', 'email', 'skype', 'phone'])
							->andWhere(['id' => $nousers])->orderBy(['id' => SORT_DESC])
							->filterWhere([
								'username' => $login,
								'sponsor' => $sponsor,
								'phone' => $phone,
								'emails' => $emails,
								'dateReg' => $dreg,
								'name' => @$name[0],
								'surname' => @$name[1],
								'father' => @$name[2],
							]);
						$session = Yii::$app->session;
						if (!$session->isActive) $session->open();
						$session->set('search_page3', $teams);
						$session->close();
						$print = 'page3';
					}
				endif;
				$dataProvider = new \yii\data\ActiveDataProvider([
					'query' => $teams,
					'sort' => false,
					'pagination' => [
						'pageSize' => 25,
						'pageParam' => $print,
					],
				]);

				return \yii\grid\GridView::widget([
					'dataProvider' => $dataProvider,
					'columns' => [
						['label' => 'Дата регистрации', 'attribute' => 'dateReg'],
						['label' => 'Логин', 'attribute' => 'username'],
						[
							'label' => 'ФИО',
							'value' => function ($data) {
								return $data->name . ' ' . $data->surname . ' ' . $data->father;
							},
						],
						['label' => 'E-mail', 'attribute' => 'email'],
						['label' => 'Телефон', 'attribute' => 'phone'],
						['label' => 'Skype', 'attribute' => 'skype'],
						['label' => 'Рефералов', 'value' => function ($data) {
							$count = User::find()
								->where(['sponsor' => $data->username])
								->count();
							return $count;
						}
						]
					]
				]);
				exit();
			}
			if (Yii::$app->request->post('number', -1) != -1) {

				$num = Yii::$app->request->post('number');
				if ($num < 0 || $num > 10) exit();
				$step = Step::findOneNotDaily([
					'owner_id' => Yii::$app->user->identity->id,
					'step' => $num
				]);
				if (is_null($step)) exit();
				$model = User::findOne(['id' => Yii::$app->user->identity->id]);
				$model->step_mon = $num;
				$model->save();
			}

			if (Yii::$app->request->post('email', -1) == 'send') {
				$email = Yii::$app->user->identity->email;
				$key = rand(11111, 99999);
				$session = Yii::$app->session;
				if (!$session->isActive) $session->open();
				$session->set('key', $key);
				$session->close();

				Yii::$app->mailer->compose()
					->setFrom('noreply@lcgreenlife.com')
					->setTo($email)
					->setSubject('Вступление в цикл на GreenLife')
					->setTextBody('Код подтверждения Email')
					->setHtmlBody('<b>Код подтверждения Email:</b> ' . $key)
					->send();

				exit();
			}
			exit();
		}
		// custom
		if (Yii::$app->request->post('set_player')) {
			$model = new SetUserInStep();
			if ($model->load(Yii::$app->request->post()) && $model->validate()) {
				$user_id = Yii::$app->request->post('set_user');

				$username = str_replace(' ', '', $model->username);
				$spons = str_replace("AA", "", $username);
				$username = mb_strtolower($spons);
				$username = 'AA' . $username;

				$user_set = User::findOne(['username' => $username]);
				$user = User::findOne(['id' => $user_id]);

				if (!is_null($user)) $steps = Step::findOneNotDaily([
					'owner_id' => $user->id,
					'step' => Yii::$app->user->identity->step_mon
				]);
				else $steps = null;

				if ($step_place[Yii::$app->user->identity->step_mon] == 7) $check = StepUsers::find()
					->select(['step_id', 'user_id', 'id'])
					->where(['step_id' => $steps->id])
					->count();

				if ($steps->status == 1 || $check >= 2) {
					Yii::$app->session->setFlash('message', 'У спонсора указанный цикл уже закрыт!');
				} else if (is_null($steps) || $user->id == $user_set->id || is_null($user_set) || is_null($user)) Yii::$app->session->setFlash('message', 'Указанный пользователь не состоит в цикле!');
				else {

					$model = new StepForm();
					$model->user_id = $user_set->id;
					$model->step_id = $steps->id;
					$model->sponsor_id = $user_id;
					$model->sponsor = 'Custom Set';
					$model->save(false);
					//Проверка на количество участников и закрытие цикла спонсора
					$check = StepUsers::find()
						->select(['step_id', 'user_id', 'id'])
						->where(['step_id' => $steps->id])
						->count();

					if ($check >= $step_place[Yii::$app->user->identity->step_mon] - 1) {
						$user = User::findOne(['id' => $steps->owner_id]);
						$user->lc = $user->lc + $step_give[Yii::$app->user->identity->step_mon];
						$user->freeze = $step_freeze[Yii::$app->user->identity->step_mon];
						$user->save();

						$steps->status = 1;
						$steps->save();
					}
				}
			}
			$this->refresh();
		}

		//
		$model = new StepForm();
		$session = Yii::$app->session;
		if (!$session->isActive) $session->open();
		$model->emailCodeCheck = $session->get('key');
		$session->close();
		if ($model->load(Yii::$app->request->post())) {
			if ($model->validate()) {
				if (Yii::$app->request->post('number', -1) != -1) {
					$num = Yii::$app->request->post('number');
					if ($num < 0 || $num > 10) exit();
					$step = Step::findOneNotDaily([
						'owner_id' => Yii::$app->user->identity->id,
						'step' => $num
					]);
					if (is_null($step)) {
						if ($buyed)
							$check = Step::findOneNotDaily([
								'owner_id' => Yii::$app->user->identity->id,
								'step' => Yii::$app->user->identity->step]);
						else $check = null;
						//
						$sponsor = str_replace(' ', '', $model->sponsor);
						$spons = str_replace("AA", "", $sponsor);
						$sponsor = mb_strtolower($spons);
						$sponsor = 'AA' . $sponsor;
						$model->sponsor = $sponsor;
						//
						$user = User::findOne(['username' => $model->sponsor]);
						if (!is_null($user)) $steps = Step::findOneNotDaily([
							'owner_id' => $user->id,
							'step' => $num
						]);
						else $steps = null;
						if ($step_price[$num] > Yii::$app->user->identity->lc) {
							Yii::$app->session->setFlash('message', 'У вас недостаточно средств для вступления в цикл!');
						} else if (!is_null($check) && $check->status != 1) {
							Yii::$app->session->setFlash('message', 'Текущий цикл полностью не заполнен!');
						} else if (is_null($steps) || $model->sponsor == Yii::$app->user->identity->username) Yii::$app->session->setFlash('message', 'Указанный спонсор не состоит в цикле!');
						else if ($steps->status == 1) {
							Yii::$app->session->setFlash('message', 'У данного спонсора указанный цикл уже закрыт!');
						} else {

							//создание цикла пользователя
							$step = new Step();
							$step->owner_id = Yii::$app->user->identity->id;
							$step->step = $num;
							$step->sponsor = $model->sponsor;
							$step->sponsor_id = $user->id;
							$step->save();

							//поиск спонсора указанного пользователем
							// $user = User::findOne(['username' => $model->sponsor]);
							$steps = Step::findOneNotDaily([
								'owner_id' => $user->id,
								'step' => $num
							]);
							if (is_null($steps)) $steps_id = -1;
							else $steps_id = $steps->id;

							//step_user
							if ($steps_id != -1) {
								$model->user_id = Yii::$app->user->identity->id;
								$model->step_id = $steps_id;
								$model->sponsor_id = $user->id;
								$model->save();

								$seven = Step::findOneNotDaily([
									'owner_id' => $steps->sponsor_id,
									'step' => $num
								]);
								if ($step_place[$num] == 7 && !is_null($seven)) {
									if (is_null($seven)) $seven_id = $steps_id;
									else $seven_id = $seven->id;

									$sevStep = new StepForm();
									$sevStep->user_id = Yii::$app->user->identity->id;
									$sevStep->step_id = $seven_id;
									$sevStep->sponsor_id = $user->id;
									$sevStep->sponsor = 'Seven';
									$sevStep->seven = $steps->owner_id;
									$sevStep->save(false);

									//Проверка на количество участников и закрытие цикла спонсора
									$check = StepUsers::find()
										->select(['step_id', 'user_id', 'id'])
										->where(['step_id' => $seven_id])
										->count();

									if ($check >= $step_place[$num] - 1) {
										$user = User::findOne(['id' => $seven->owner_id]);
										$user->lc = $user->lc + $step_give[$num];
										$user->freeze = $step_freeze[$num];
										$user->save();

										$seven->status = 1;
										$seven->save();

										//логирование
										$logs = new UserLogs();
										$logs->type = 0;
										$logs->user_id = $seven->owner_id;
										$logs->date = date("Y-m-d H:i:s");
										$logs->object = 'Счёт';
										$logs->action = 'Закрытия цикла';
										$logs->sum = $step_give[$num];
										$logs->save();
									}
								}
							}

							//Проверка на количество участников и закрытие цикла спонсора
							$check = StepUsers::find()
								->select(['step_id', 'user_id', 'id'])
								->where(['step_id' => $steps_id])
								->count();

							if ($check >= $step_place[$num] - 1) {
								$user = User::findOne(['id' => $steps->owner_id]);
								$user->lc = $user->lc + $step_give[$num];
								$user->freeze = $step_freeze[$num];
								$user->save();

								$steps->status = 1;
								$steps->save();

								//логирование
								$logs = new UserLogs();
								$logs->type = 0;
								$logs->user_id = $steps->owner_id;
								$logs->date = date("Y-m-d H:i:s");
								$logs->object = 'Счёт';
								$logs->action = 'Закрытия цикла';
								$logs->sum = $step_give[$num];
								$logs->save();
							}
							//обновление баланаса пользователя
							$model = User::findOne(['id' => Yii::$app->user->identity->id]);
							$model->freeze = 0;
							$model->lc = $model->lc - $step_price[$num];
							$model->step = $num;
							$model->step_mon = $num;
							$model->save();

							//логирование
							$logs = new UserLogs();
							$logs->type = 0;
							$logs->user_id = Yii::$app->user->identity->id;
							$logs->date = date("Y-m-d H:i:s");
							$logs->object = 'Счёт';
							$logs->action = 'Вступление в цикл';
							$logs->sum = -$step_price[$num];
							$logs->save();

							$this->refresh();
						}
					} else {
						$model = User::findOne(['id' => Yii::$app->user->identity->id]);
						$model->step_mon = $num;
						$model->save();
					}
				}
			} else Yii::$app->session->setFlash('message', 'Неверно введены данные!');
		}
		$model = new StepForm();
		$step_user = -1;
		$step_mon = -1;
		foreach ($teamed as $team) {
			if ($team->step == Yii::$app->user->identity->step) {
				$step_user = $team->id;
			}
			if ($team->step == Yii::$app->user->identity->step_mon) {
				$step_mon = $team->id;
			}
			if ($step_user != -1 && $step_mon != -1) break;
		}
		if ($buyed)
			$check = StepUsers::find()
				->select(['step_id', 'user_id', 'id'])
				->where(['step_id' => $step_user])
				->andWhere(['<>', 'user_id', Yii::$app->user->identity->id])
				->andWhere(['seven' => 0])
				->all();
		else $check = 0;

		/*if(Yii::$app->user->identity->role == 0)
		  $all_users_step = Step::find()->select(['id','owner_id'])
			->where(['sponsor' => Yii::$app->user->identity->username, 'step' => Yii::$app->user->identity->step_mon])
			->all();

	   else*/
		$all_users_step = Step::stepka()
			->where(['step' => Yii::$app->user->identity->step_mon])
			->andWhere(['<>', 'owner_id', Yii::$app->user->identity->id])
			->andWhere(['status' => 0])
			->whereNotDailyStep(true)
			//->getSteps(Yii::$app->user->identity->id)->orderBy(['id' => SORT_ASC])
			->all();

		$out_user = Step::stepka()
			->where(['step' => Yii::$app->user->identity->step_mon])
			->andWhere(['status' => 1])
			->whereNotDailyStep(true)
			//->getSteps(Yii::$app->user->identity->id)->orderBy(['id' => SORT_ASC])
			->all();

		$out = Step::findOneNotDaily([
			'owner_id' => Yii::$app->user->identity->id,
			'status' => 0,
			'step' => Yii::$app->user->identity->step_mon
		]);


		$user_set = new SetUserInStep();

		return $this->render('mon', [
			'model' => $model,
			'all' => $all,
			'buyed' => $teamed,
			'teamed' => $check,
			'step_name' => $step_name,
			'step_price' => $step_price,
			'step_place' => $step_place,
			'users_step' => $all_users_step,
			'user_set' => $user_set,
			'out' => $out,
			'out_user' => $out_user,
			'mon_step' => $step_mon
		]);
	}

	public function actionNews()
	{
		if (Yii::$app->user->isGuest) {
			return $this->redirect(URL::to(['/green/index']));
		}
		$news = UserNews::find()
			->select(['id', 'title', 'desc_text'])
			->orderBy(['id' => SORT_DESC])
			->all();
		return $this->render('news', [
			'news' => $news
		]);
	}

	public function actionFeedback()
	{
		if (Yii::$app->user->isGuest) {
			return $this->redirect(URL::to(['/green/index']));
		}
		if (Yii::$app->request->isAjax) {
			if (Yii::$app->request->post('action', -1) == 'send_mess') {
				$who = Yii::$app->user->identity->username;
				$send = Yii::$app->request->post('send');
				$title = Yii::$app->request->post('title');
				$message = Yii::$app->request->post('message');

				if (!$message) return 'error: Поле - Сообщение, не должно быть пустым!';
				if (!$send && $send != -1) return 'error: Поле - Кому, не должно быть пустым!';
				if ($send != -1) {
					$user = User::findOne(['username' => $send]);
					if (is_null($user)) return 'error: Пользователь не найден!';
					else if ($user->username == $who) return 'error: Вы не можете отправить себе сообщение!';
					else $send = $user->username;
				}
				$sup_message = new FeedBackMod();
				$sup_message->title = $title;
				$sup_message->desc_text = $message;
				$sup_message->who = $who;
				$sup_message->send = $send;
				if ($sup_message->send == -1) $sup_message->seen = 0;
				$sup_message->send_date = date("Y-m-d H:i:s");
				$sup_message->update_date = date("Y-m-d H:i:s");
				$sup_message->save();

				echo 'ok';

				exit();
			}
		}
		return $this->render('feedback');
	}

	public function actionDialog($id)
	{
		if (Yii::$app->user->isGuest) {
			return $this->redirect(URL::to(['/green/index']));
		}
		$support = FeedBackMod::findOne(['id' => $id]);
		if (is_null($support) || strcasecmp($support->who, Yii::$app->user->identity->username) != 0 && strcasecmp($support->send, Yii::$app->user->identity->username) != 0) return $this->redirect(URL::to(['/user']));
		$support->new = 0;
		$support->save();
		if ($support->send == -1) $support->send = 'Техподдержка';
		if ($support->who == -1) $support->who = 'Техподдержка';
		$dialog = DialogFeed::find()
			->where(['support_id' => $id])
			->all();
		$model = new DialogFeed();
		if ($model->load(Yii::$app->request->post())) {
			$model->support_id = $support->id;
			$model->date_ticket = date("Y-m-d H:i:s");
			$model->who = Yii::$app->user->identity->username;
			$model->save();

			if ($support->who == 'Техподдержка') $support->who = -1;
			if ($support->send == 'Техподдержка') $support->send = -1;
			if ($support->send == -1 || $support->who == -1) $support->seen = 0;
			$support->new = 1;
			$support->update_date = date("Y-m-d H:i:s");
			$support->last_send = Yii::$app->user->identity->username;
			$support->save();

			$this->refresh();
		}
		return $this->render('dialog', [
			'support' => $support,
			'dialog' => $dialog,
			'model' => $model,
		]);
	}

	public function actionFinance()
	{
		if (Yii::$app->user->isGuest) {
			return $this->redirect(URL::to(['/green/index']));
		}
		if (Yii::$app->request->isAjax) {
			if (Yii::$app->request->post('email', -1) == 'send') {
				$email = Yii::$app->user->identity->email;
				$key = rand(11111, 99999);
				$session = Yii::$app->session;
				if (!$session->isActive) $session->open();
				$session->set('key', $key);
				$session->close();
				Yii::$app->mailer->compose()
					->setFrom('noreply@lcgreenlife.com')
					->setTo($email)
					->setSubject('Перевод средств на GreenLife')
					->setTextBody('Код подтверждения Email')
					->setHtmlBody('<b>Код подтверждения Email:</b> ' . $key)
					->send();
				exit();
			}
		}
		$count_ref = User::sponsor()
			->select(['id'])
			->where(['sponsor' => Yii::$app->user->identity->username])
			->count();

		$all = User::sponsor()
			->select(['id'])
			->getReferals(Yii::$app->user->identity->username)->orderBy(['id' => SORT_ASC])
			->count();

		$model = new UserWithdraw();
		if ($model->load(Yii::$app->request->post())) {
			if ($model->validate()) {
				$minus = $model->sum;

				if ($model->currency == 'EUR') {
					$type_money = Yii::$app->user->identity->eur;
				} else {
					$type_money = Yii::$app->user->identity->lc;
				}

				if ($model->sum + ($minus * 0.05) > ($type_money - Yii::$app->user->identity->freeze)) {
					Yii::$app->session->setFlash('message', 'У вас нет столько!');
				} elseif ($model->sum % 100 != 0) Yii::$app->session->setFlash('message', 'Сумма для вывода должна быть кратна 100!');
				else {
					$user = User::findOne(['id' => Yii::$app->user->identity->id]);

					if ($model->currency == 'EUR') {
						$user->eur = $user->eur - $model->sum;
						$user->eur = $user->eur - ($minus * 0.05);
					} else {
						$user->lc = $user->lc - $model->sum;
						$user->lc = $user->lc - ($minus * 0.05);
					}

					$user->save();

					$type = array('Perfect Money', 'Payeer', 'Qiwi');
					$model->type = $type[$model->type];
					$model->user_id = Yii::$app->user->identity->id;
					$model->save();

					//логирование
					$logs = new UserLogs();
					$logs->type = 0;
					$logs->user_id = Yii::$app->user->identity->id;
					$logs->date = date("Y-m-d H:i:s");
					$logs->object = 'Счёт';
					$logs->action = 'Вывод средств';
					$logs->sum = -$model->sum;
					$logs->save();

					$logs = new UserLogs();
					$logs->type = 0;
					$logs->user_id = Yii::$app->user->identity->id;
					$logs->date = date("Y-m-d H:i:s");
					$logs->object = 'Счёт';
					$logs->action = 'Комиссия за вывод средств';
					$logs->sum = -($minus * 0.05);
					$logs->save();

					$this->refresh();
				}
			}
		}
		
		$transfer = new TransferUser();
		
		if ($transfer->load(Yii::$app->request->post())) {
			$session = Yii::$app->session;
			if (!$session->isActive) $session->open();
			$key = $session->get('key');
			$session->destroy();
			if ($transfer->emailCode != $key || !$key) Yii::$app->session->setFlash('transfer', 'Неверный Email код!');
			else if ($transfer->validate()) {
				if ($transfer->currency == 'EUR') {
					$type_money = Yii::$app->user->identity->eur;
				} else {
					$type_money = Yii::$app->user->identity->lc;
				}

				$user = User::findOne(['username' => $transfer->userto]);
				if ($transfer->sum > ($type_money - Yii::$app->user->identity->freeze)) {
					Yii::$app->session->setFlash('transfer', 'У вас нет такой суммы!');
				} else if (is_null($user)) Yii::$app->session->setFlash('transfer', 'Пользователь не найден!');
				else {
					if ($transfer->currency == 'EUR') {
						$user->eur = $user->eur + $transfer->sum;
					} else {
						$user->lc = $user->lc + $transfer->sum;
					}

					$user->save();
					$toUser = $user;
					$forUser = User::findOne(['id' => Yii::$app->user->identity->id]);
					//логирование
					$logs = new UserLogs();
					$logs->type = 0;
					$logs->user_id = $user->id;
					$logs->date = date("Y-m-d H:i:s");
					$logs->object = 'Счёт';
					$logs->action = 'Перевод средств от ' . $forUser->username;
					$logs->sum = $transfer->sum;
					$logs->save();


					if ($transfer->currency == 'EUR') {
						$forUser->eur = $forUser->eur - $transfer->sum;
					} else {
						$forUser->lc = $forUser->lc - $transfer->sum;
					}

					$forUser->save();

					//логирование
					$logs = new UserLogs();
					$logs->type = 0;
					$logs->user_id = Yii::$app->user->identity->id;
					$logs->date = date("Y-m-d H:i:s");
					$logs->object = 'Счёт';
					$logs->action = 'Перевод средств ' . $toUser->username;
					$logs->sum = -$transfer->sum;
					$logs->save();

					$this->refresh();
				}
			}
		}

		$setting = AdmSetting::findOne(['id' => 1]);
		return $this->render('finance',
			[
				'ref' => $count_ref,
				'strukt' => $all,
				'model' => $model,
				'transfer' => $transfer,
				'setting' => $setting,
			]);
	}

	public function actionMarket()
	{
		if (Yii::$app->user->isGuest) {
			return $this->redirect(URL::to(['/green/index']));
		}
		return $this->render('market');
	}

	public function actionLink()
	{
		$model = new UserLink();
		$request = \Yii::$app->getRequest();
		if ($request->isPost && $model->load($request->post())) {
			$session = Yii::$app->session;
			if (!$session->isActive) $session->open();
			$model->emailCodeCheck = $session->get('key_link');
			$email = User::findOne(['username' => $model->account]);
			if (!is_null($email)) $session->set('link_user', $email->email);
			$session->close();
			\Yii::$app->response->format = Response::FORMAT_JSON;
			return \yii\widgets\ActiveForm::validate($model);
		}
	}

	public function actionSavelink()
	{
		$model = new UserLink();
		$request = \Yii::$app->getRequest();
		if ($request->isPost && $model->load($request->post())) {
			$session = Yii::$app->session;
			if (!$session->isActive) $session->open();

			$model->emailCodeCheck = $session->get('key_link');

			$session->remove('key_link');
			$session->close();

			$model->link_id = Yii::$app->user->identity->id;
			$model->user_id = User::findOne(['username' => $model->account])->id;
			\Yii::$app->response->format = Response::FORMAT_JSON;
			return ['success' => $model->save()];
		}
		return $this->renderAjax('', [
			'model' => $model,
		]);
	}

	public function actionLinkcode()
	{
		if (Yii::$app->request->isAjax) {
			if (Yii::$app->request->post('email', -1) == 'send') {

				$session = Yii::$app->session;
				if (!$session->isActive) $session->open();
				$email = $session->get('link_user');
				$key = rand(11111, 99999);
				$session->set('key_link', $key);
				$session->close();
				Yii::$app->mailer->compose()
					->setFrom('noreply@lcgreenlife.com')
					->setTo($email)
					->setSubject('Привязка аккаунта')
					->setTextBody('Код подтверждения Email')
					->setHtmlBody('<b>Код подтверждения Email:</b> ' . $key)
					->send();
				exit();
			}
		}
	}

	public function actionChangeuser($user)
	{
		if (Yii::$app->user->isGuest) {
			return $this->redirect(URL::to(['/green/index']));
		}
		$acc = User::findOne(['username' => $user]);
		if (is_null($acc)) return $this->redirect(URL::to(['/green/index']));
		$link = UserLink::findOne(['user_id' => $acc->id, 'link_id' => Yii::$app->user->identity->id]);
		if (is_null($link)) {
			$link = UserLink::findOne(['user_id' => Yii::$app->user->identity->id, 'link_id' => $acc->id]);
		}
		if (is_null($link)) {
			$link = UserLink::findOne(['user_id' => $acc->id]);
		}
		if (!is_null($link)) {
			$model = new LoginForm();
			$model->username = $acc->username;
			$model->pass = $acc->pass;

			Yii::$app->user->logout();
			Yii::$app->user->login($model->getUser(), 0);
		}
		return $this->redirect(URL::to(['/user/index']));
	}


	//daily-money

	/**
	 * @return string|Response
	 */
	public function actionDailyMoney()
	{
		if (MyClass::myIp()) {
//            StepUsers::findOne(5459)->delete();
//            StepUsers::findOne(5460)->delete();
		}
		if (Yii::$app->user->isGuest) {
			return $this->redirect(URL::to(['/green/index']));
		}

		/**@var $user User */
		$user = Yii::$app->user->identity;

		$dailyes = DailyMoney::find()->whereShow()->indexBy('id')->all();
		$step_name = ArrayHelper::map($dailyes, 'id', 'name');
		$step_price = ArrayHelper::map($dailyes, 'id', 'price');
		$step_place = ArrayHelper::map($dailyes, 'id', 'place');

		/** @var  \app\models\UserClone $activeClone */

		if (!$activeClone = $user->activeClone) {
			if ($user->clone) {
				$cloneModel = $user->clone;
				$cloneModel->status = UserClone::STATUS_ACTIVE;
				$cloneModel->update();
				$activeClone = $user->activeClone;
			}
		}
		if ($activeClone && !$activeClone->getSteps()->count()) {
			if ($user->clone) {
				$cloneModel = $user->clone;
				$cloneModel->status = UserClone::STATUS_ACTIVE;
				$cloneModel->update();
				$activeClone = $user->activeClone;
			}
		}
		if (Yii::$app->request->isAjax) {
			if (Yii::$app->request->post('clone')) {
				if ($model = UserClone::findOne(['id' => Yii::$app->request->post('clone')])) {
					$userId = Yii::$app->request->post('user');
					$model->createActive();
					if ($userId && $userId != $user->id) {
						$data = $model->getStepOne()->one();
						return $this->renderAjax('./daily-money/out-data', ['out' => $data, 'step_place' => $step_place]);
					}
					return true;
				}
			}
			if (Yii::$app->request->post('number')) {

				$num = Yii::$app->request->post('number');

				if (!$stepNumber = ArrayHelper::getValue($dailyes, $num, false)) {
					exit();
				}
				$step = Step::find()->where(['owner_id' => $user->id, 'step' => $num])->whereDaily()->one();

				if (is_null($step)) {
					exit();
				}
				$model = User::findOne(['id' => $user->id]);
				$model->daily_step = $num;
				$model->save();
			}


			//send code
			if (Yii::$app->request->post('email', -1) == 'send') {
				$email = $user->email;
				$key = rand(11111, 99999);
				$session = Yii::$app->session;
				if (!$session->isActive) $session->open();
				$session->set('key', $key);
				$session->close();

				Yii::$app->mailer->compose()
					->setFrom('noreply@lcgreenlife.com')
					->setTo($email)
					->setSubject('Вступление в площадке на GreenLife')
					->setTextBody('Код подтверждения Email')
					->setHtmlBody('<b>Код подтверждения Email:</b> ' . $key)
					->send();

				exit();
			}
			exit();
		}


		$clone = false;


		$modelClone = new UserClone();

		if ($modelClone->load(Yii::$app->request->post()) && $modelClone->validate()) {

			if (!$activeClone) {
				Yii::$app->session->setFlash('message', 'У Вас площадка нету, что Вы делает клоун!');
				return $this->refresh();
			}
			if (!$stepNumber = ArrayHelper::getValue($dailyes, $modelClone->number, false)) {
				Yii::$app->session->setFlash('message', 'Такое Площадка нету!');
				return $this->refresh();
			}
			if ($stepNumber->category == DailyMoney::CATEGORY_BONUS) {
				Yii::$app->session->setFlash('message', 'это площадка только живущий человек!');
				return $this->refresh();
			}

			$stepNumbers = $stepNumber->getAllMin();

			if ($stepNumbers) {
				foreach ($stepNumbers as $stepNumber) {
					/**@var $stepOne Step */
					if (!$stepOne = $activeClone->getStepOne($stepNumber->id)->one()) {
						Yii::$app->session->setFlash('message', 'У Вас нет такого площадка!');
						return $this->refresh();
					}

					if ($stepOne->status == Step::STATUS_CLOSURES) {
						continue;
					}
					$stepCount = $stepOne->GetStepsUsers()->count();
					if ($stepCount < 1) {
						Yii::$app->session->setFlash('message', 'У Вас в  площадке  должен  быть один человек! После этого Вы можете создать клон!');
						return $this->refresh();
					}
				}
			}

			$modelClone->sponsor = $activeClone->name;
			$clonesCount = $user->getClones()->count();
			$modelClone->name = $user->username . $clonesCount;

			if (ArrayHelper::getValue($step_price, $modelClone->number) > $user->lc) {
				Yii::$app->session->setFlash('message', 'У вас недостаточно средств для вступления в площадку!');
				return $this->refresh();
			}
			$modelClone = $modelClone->checkClone();

			if (!$modelClone->save()) {
				Yii::$app->session->setFlash('message', 'Это клон не сохраняется, пожалуйста попробуйте ещё раз!');
				return $this->refresh();
			}

			$clone = true;
		}

		$model = new StepForm();
		if (!$clone) {
			$session = Yii::$app->session;
			if (!$session->isActive) $session->open();
			$model->emailCodeCheck = $session->get('key');
			$session->close();
		}
		$postData = Yii::$app->request->post();
		if ($clone) {
			$model->emailCodeCheck = (string)rand(11111, 99999);

			$postData['StepForm'] = [
				'emailCode' => $model->emailCodeCheck,
				'sponsor' => $modelClone->sponsor
			];
		}
		$price = 0;
		if ($postData) {
			if (!$model->load($postData)) {
				Yii::$app->session->setFlash('message', 'Неверно введены данные !');
				return $this->refresh();
			}
			$num = Yii::$app->request->post('number');
			if ($clone) {
				$num = $modelClone->number;
			}
			if (!$num) {
				Yii::$app->session->setFlash('message', 'Такое Площадка нету!');
				return $this->refresh();
			}
			$stepNumber = ArrayHelper::getValue($dailyes, $num, false);
			if (!$stepNumber) {
				Yii::$app->session->setFlash('message', 'Такое Площадка нету!');
				return $this->refresh();
			}
			if (!$model->validate()) {
				Yii::$app->session->setFlash('message', 'Неверно введены данные !');
				return $this->refresh();
			}
			if (!$clone) {
				$modelClone = UserClone::createClone($user);
			}
			if (!$modelClone) {
				Yii::$app->session->setFlash('message', 'Неверно введены данные!');
				return $this->refresh();
			}
			if ($clone) {
				$maxStep = $modelClone->getSteps()->whereClosures()->orderBy(['step' => SORT_DESC])->select(['id', 'step'])->one();
				if ($maxStep && $maxStep->step == DailyMoney::getMaxDaily()->id) {
					Yii::$app->session->setFlash('message', 'Указанный спонсор не состоит в площадке!');
					return $this->refresh();
				}
			}

			$stepNumbersNew = [];
			$model->checkSponsor();
			if (!$sponsorClone = UserClone::findOne(['name' => $model->sponsor])) {
				Yii::$app->session->setFlash('message', 'Указанный спонсор не состоит в площадке!');
				return $this->refresh();
			}

			if ($sponsorClone->name == $modelClone->name && $sponsorClone->name != Yii::$app->params['parentSponsor']) {
				Yii::$app->session->setFlash('message', 'Указанный спонсор не состоит в площадке!');
				return $this->refresh();
			}
			$addPrice = 0;
			$addCount = 0;
			if ($stepNumbers = $stepNumber->getAllMin()) {
				$countSteps = $sponsorClone->getSteps()->whereProcessing(true)->count();
				$countStepsEnd = $sponsorClone->getSteps()->whereClosures(true)->count();
				$newCloneStepsEnd = $modelClone->getSteps()->whereClosures(true)->count();
				$dailyCount = DailyMoney::find()->whereShow()->wherePlayground_1(true)->count();
				if (!$countSteps && $sponsorClone->user_id != $user->id) {
					Yii::$app->session->setFlash('message', 'Указанный спонсор не состоит в площадке!');
					return $this->refresh();
				}
				foreach ($stepNumbers as $stepNumber) {
					$stepOne = $sponsorClone->getStepOne($stepNumber->id)->one();
					if ($stepOne) {
						if ($stepOne->status == Step::STATUS_CLOSURES) {
							continue;
						}

						if ($stepOne->status == Step::STATUS_PROCESSING && !$clone) {
							if ($c = $stepOne->GetStepsUsers($sponsorClone->user_id)->count()) {
								if ($stepNumber->category != DailyMoney::CATEGORY_BONUS) {
									continue;
								}
							}
//                                        Yii::$app->session->setFlash('message','Текущий площадке полностью не заполнен!');
//                                        return $this->refresh();
						}
					} elseif ($sponsorClone->name != Yii::$app->params['parentSponsor']) {
						Yii::$app->session->setFlash('message', 'Указанный спонсор не состоит в площадке!');
						return $this->refresh();
					}
					if ($stepNumber->category == DailyMoney::CATEGORY_PLAYGROUND) {
						if ($countStepsEnd < $dailyCount) {
							Yii::$app->session->setFlash('message', 'Указанный спонсор не состоит в площадке!');
							return $this->refresh();
						}
						if ($newCloneStepsEnd < $dailyCount) {
							Yii::$app->session->setFlash('message', 'Вам надо купить все площадки!');
							return $this->refresh();
						}
					}

					if (!$stepOne || $stepOne->status == Step::STATUS_PROCESSING) {
						$price += $stepNumber->price;
					}
					$stepNumbersNew[] = $stepNumber;
				}
				if ($price > $user->lc) {
					Yii::$app->session->setFlash('message', 'У вас недостаточно средств для вступления в площадке!');
					return $this->refresh();
				}

				if (!$stepNumbersNew) {
					Yii::$app->session->setFlash('message', 'Указанный спонсор не состоит в площадке!');
					return $this->refresh();
				}
				$minDaily = DailyMoney::getMinDaily();
				if ($sponsorClone->getSteps()->whereClosures()->count()) {
					foreach ($stepNumbersNew as $stepNumber) {
						if ($stepNumber->id == $minDaily->id) {
							continue;
						}
						foreach (DailyMoney::find()->whereShow()->andWhere(['<', 'range', $stepNumber->range])->andWhere(['!=', 'category', DailyMoney::CATEGORY_PLAYGROUND_1])->all() as $d) {
							if (!$modelClone->getSteps()->whereClosures()->andWhere(['step' => $d->id])->count()) {
								Yii::$app->session->setFlash('message', 'Вам нужно закрыть все открытые площадки.');
								return $this->refresh();
							}
						}
					}
				}

				foreach ($stepNumbersNew as $stepNumber) {
					if ($data = $modelClone->createStep($stepNumber, $model, $clone)) {
						if ($message = ArrayHelper::getValue($data, 'message')) {
							Yii::$app->session->setFlash('message', $message);
							return $this->refresh();
						}
						if ($sum = ArrayHelper::getValue($data, 'price')) {
							$addPrice += $sum;
						}
					}
					$addCount++;
				}
			} elseif (!$modelClone->steps) {
				Yii::$app->session->setFlash('message', 'Вам надо купить все площадки!');
				return $this->refresh();
			}

			$user->freeze = $user->getClones()->sum('freeze');
			$user->save();
			if ($sponsorClone) {
				$sponsorClone->user->freeze = $sponsorClone->user->getClones()->sum('freeze');
				$sponsorClone->user->save();
			}
			return $this->refresh();
		}

		$model = new StepForm();
		$activeDaily = new DailyMoney();
		if ($user->daily_step) {
			$activeDaily = DailyMoney::findOne(['id' => $user->daily_step]);
		}


		$all_users_step = $out = [];
		$out_user = Step::find()->whereOwner()->andWhere(['step' => $user->daily_step])->whereClosures(true)->all();
		$out_userNew = [];

		if ($activeDaily) {
			foreach ($out_user as $value) {
				$break = false;
				foreach (DailyMoney::find()->whereShow()->andWhere(['>', 'range', $activeDaily->range])->all() as $dailyData) {
					if ($value->cloneOne && $value->cloneOne->getStepOne($dailyData->id)->count()) {
						$break = true;
						break;
					}
				}
				if (!$break) {
					$out_userNew[] = $value;
				}
			}
		}
		$out_user = $out_userNew;
		$clones = $dataClones = [];
		if ($activeClone) {
			foreach (Yii::$app->user->identity->getClones()->all() as $c) {
				/**@var  $c UserClone */
				if (!$c->getSteps()->count()) {
					continue;
				}
				$dataClones[$c->id] = $c->name;
			}
			$out = $activeClone->getStepOne($user->daily_step)->one();
		}

		if ($user->clone) {
			if ($clonesIds = $user->getClones()->andWhere(['!=', 'name', $user->username])->select(['id'])->column()) {

				$clones = Step::find()->where(['clone' => $clonesIds])->andWhere(['step' => $user->daily_step])->groupBy(['clone'])->all();
			}
		}


		return $this->render('daily-money', [
			'model' => $model,
			'activeClone' => $activeClone,
			'clones' => $clones,
			'dailyes' => $dailyes,
			'dataClones' => $dataClones,
			'out' => $out,
			'out_user' => $out_user,
			'step_name' => $step_name,
			'step_price' => $step_price,
			'step_place' => $step_place,
			'users_step' => $all_users_step,

		]);
	}

	//daily-money-eur

	/**
	 * @return string|Response
	 */
	public function actionDailyMoneyEur()
	{
		if (Yii::$app->user->isGuest) {
			return $this->redirect(URL::to(['/green/index']));
		}

		/**@var $user User */
		$user = Yii::$app->user->identity;

		$dailyes = DailyMoneyEur::find()->whereShow()->indexBy('id')->all();
		$step_name = ArrayHelper::map($dailyes, 'id', 'name');
		$step_price = ArrayHelper::map($dailyes, 'id', 'price');
		$step_place = ArrayHelper::map($dailyes, 'id', 'place');

		/** @var  \app\models\UserCloneEur $activeCloneEur */

		if (!$activeClone = $user->activeCloneEur) {
			if ($user->clone_eur) {
				$cloneModel = $user->clone_eur;
				$cloneModel->status = UserCloneEur::STATUS_ACTIVE;
				$cloneModel->update();
				$activeClone = $user->activeCloneEur;
			}
		}

		if ($activeClone && !$activeClone->getSteps()->count()) {
			if ($user->clone_eur) {
				$cloneModel = $user->clone_eur;
				$cloneModel->status = UserCloneEur::STATUS_ACTIVE;
				$cloneModel->update();
				$activeClone = $user->activeCloneEur;
			}
		}

		if (Yii::$app->request->isAjax) {
			if (Yii::$app->request->post('clone')) {
				if ($model = UserCloneEur::findOne(['id' => Yii::$app->request->post('clone')])) {
					$userId = Yii::$app->request->post('user');
					$model->createActive();
					if ($userId && $userId != $user->id) {
						$data = $model->getStepOne()->one();
						return $this->renderAjax('./daily-money-eur/out-data', ['out' => $data, 'step_place' => $step_place]);
					}
					return true;
				}
			}
			if (Yii::$app->request->post('number')) {

				$num = Yii::$app->request->post('number');

				if (!$stepNumber = ArrayHelper::getValue($dailyes, $num, false)) {
					exit();
				}
				$step = StepEur::find()->where(['owner_id' => $user->id, 'step' => $num])->whereDaily()->one();

				if (is_null($step)) {
					exit();
				}
				$model = User::findOne(['id' => $user->id]);
				$model->daily_step_eur = $num;
				$model->save();
			}


			//send code
			if (Yii::$app->request->post('email', -1) == 'send') {
				$email = $user->email;
				$key = rand(11111, 99999);
				$session = Yii::$app->session;
				if (!$session->isActive) $session->open();
				$session->set('key', $key);
				$session->close();

				Yii::$app->mailer->compose()
					->setFrom('noreply@lcgreenlife.com')
					->setTo($email)
					->setSubject('Вступление в площадке на GreenLife')
					->setTextBody('Код подтверждения Email')
					->setHtmlBody('<b>Код подтверждения Email:</b> ' . $key)
					->send();

				exit();
			}
			exit();
		}

		$clone = false;

		$modelClone = new UserCloneEur();

		if ($modelClone->load(Yii::$app->request->post()) && $modelClone->validate()) {
			if (!$activeClone) {
				Yii::$app->session->setFlash('message', 'У Вас площадка нету, что Вы делает клоун!');
				return $this->refresh();
			}
			if (!$stepNumber = ArrayHelper::getValue($dailyes, $modelClone->number, false)) {
				Yii::$app->session->setFlash('message', 'Такое Площадка нету!');
				return $this->refresh();
			}
			if ($stepNumber->category == DailyMoneyEur::CATEGORY_BONUS) {
				Yii::$app->session->setFlash('message', 'это площадка только живущий человек!');
				return $this->refresh();
			}

			$stepNumbers = $stepNumber->getAllMin();

			if ($stepNumbers) {
				foreach ($stepNumbers as $stepNumber) {
					/**@var $stepOne StepEur */
					if (!$stepOne = $activeClone->getStepOne($stepNumber->id)->one()) {
						Yii::$app->session->setFlash('message', 'У Вас нет такого площадка!');
						return $this->refresh();
					}

					if ($stepOne->status == StepEur::STATUS_CLOSURES) {
						continue;
					}

					$stepCount = $stepOne->GetStepsUsers()->count();
					if ($stepCount < 1) {
						Yii::$app->session->setFlash('message', 'У Вас в  площадке  должен  быть один человек! После этого Вы можете создать клон!');
						return $this->refresh();
					}
				}
			}

			$modelClone->sponsor = $activeClone->name;
			$clonesCount = $user->getClonesEur()->count();
			$modelClone->name = $user->username . $clonesCount;

			if (ArrayHelper::getValue($step_price, $modelClone->number) > $user->eur) {
				Yii::$app->session->setFlash('message', 'У вас недостаточно средств для вступления в площадку!');
				return $this->refresh();
			}
			$modelClone = $modelClone->checkClone();

			if (!$modelClone->save()) {
				Yii::$app->session->setFlash('message', 'Это клон не сохраняется, пожалуйста попробуйте ещё раз!');
				return $this->refresh();
			}

			$clone = true;
		}

		$model = new StepFormEur();

		if (!$clone) {
			$session = Yii::$app->session;
			if (!$session->isActive) $session->open();
			$model->emailCodeCheck = $session->get('key');
			$session->close();
		}

		$postData = Yii::$app->request->post();

		if ($clone) {
			$model->emailCodeCheck = (string)rand(11111, 99999);

			$postData['StepFormEur'] = [
				'emailCode' => $model->emailCodeCheck,
				'sponsor' => $modelClone->sponsor
			];
		}

		$price = 0;
		if ($postData) {
			if (!$model->load($postData)) {
				Yii::$app->session->setFlash('message', 'Неверно введены данные !');
				return $this->refresh();
			}
			$num = Yii::$app->request->post('number');
			if ($clone) {
				$num = $modelClone->number;
			}
			if (!$num) {
				Yii::$app->session->setFlash('message', 'Такое Площадка нету!');
				return $this->refresh();
			}

			$stepNumber = ArrayHelper::getValue($dailyes, $num, false);

			if (!$stepNumber) {
				Yii::$app->session->setFlash('message', 'Такое Площадка нету!');
				return $this->refresh();
			}

			if (!$model->validate()) {
				Yii::$app->session->setFlash('message', 'Неверно введены данные !');
				return $this->refresh();
			}

			if (!$clone) {
				$modelClone = UserCloneEur::createClone($user);
			}

			if (!$modelClone) {
				Yii::$app->session->setFlash('message', 'Неверно введены данные!');
				return $this->refresh();
			}

			if ($clone) {
				$maxStep = $modelClone->getSteps()->whereClosures()->orderBy(['step' => SORT_DESC])->select(['id', 'step'])->one();
				if ($maxStep && $maxStep->step == DailyMoneyEur::getMaxDaily()->id) {
					Yii::$app->session->setFlash('message', 'Указанный спонсор не состоит в площадке!');
					return $this->refresh();
				}
			}

			$stepNumbersNew = [];

			$model->checkSponsor();

			if (!$sponsorClone = UserCloneEur::findOne(['name' => $model->sponsor])) {
				Yii::$app->session->setFlash('message', 'Указанный спонсор не состоит в площадке!');
				return $this->refresh();
			}

			if ($sponsorClone->name == $modelClone->name && $sponsorClone->name != Yii::$app->params['parentSponsor']) {
				Yii::$app->session->setFlash('message', 'Указанный спонсор не состоит в площадке!');
				return $this->refresh();
			}

			$addPrice = 0;
			$addCount = 0;

			if ($stepNumbers = $stepNumber->getAllMin()) {
				$countSteps = $sponsorClone->getSteps()->whereProcessing(true)->count();
				$countStepsEnd = $sponsorClone->getSteps()->whereClosures(true)->count();
				$newCloneStepsEnd = $modelClone->getSteps()->whereClosures(true)->count();

				$dailyCount = DailyMoneyEur::find()->whereShow()->wherePlayground_1(true)->count();

				if (!$countSteps && $sponsorClone->user_id != $user->id) {
					Yii::$app->session->setFlash('message', 'Указанный спонсор не состоит в площадке!');
					return $this->refresh();
				}

				foreach ($stepNumbers as $stepNumber) {
					$stepOne = $sponsorClone->getStepOne($stepNumber->id)->one();
					if ($stepOne) {
						if ($stepOne->status == StepEur::STATUS_CLOSURES) {
							continue;
						}

						if ($stepOne->status == StepEur::STATUS_PROCESSING && !$clone) {
							if ($c = $stepOne->GetStepsUsers($sponsorClone->user_id)->count()) {
								if ($stepNumber->category != DailyMoneyEur::CATEGORY_BONUS) {
									continue;
								}
							}
						}
					} elseif ($sponsorClone->name != Yii::$app->params['parentSponsor']) {
						Yii::$app->session->setFlash('message', 'Указанный спонсор не состоит в площадке!');
						return $this->refresh();
					}
					if ($stepNumber->category == DailyMoneyEur::CATEGORY_PLAYGROUND) {
						if ($countStepsEnd < $dailyCount) {
							Yii::$app->session->setFlash('message', 'Указанный спонсор не состоит в площадке!');
							return $this->refresh();
						}
						if ($newCloneStepsEnd < $dailyCount) {
							Yii::$app->session->setFlash('message', 'Вам надо купить все площадки!');
							return $this->refresh();
						}
					}

					if (!$stepOne || $stepOne->status == StepEur::STATUS_PROCESSING) {
						$price += $stepNumber->price;
					}
					$stepNumbersNew[] = $stepNumber;
				}

				if ($price > $user->eur) {
					Yii::$app->session->setFlash('message', 'У вас недостаточно средств для вступления в площадке!');
					return $this->refresh();
				}

				if (!$stepNumbersNew) {
					Yii::$app->session->setFlash('message', 'Указанный спонсор не состоит в площадке!');
					return $this->refresh();
				}

				$minDaily = DailyMoneyEur::getMinDaily();

				if ($sponsorClone->getSteps()->whereClosures()->count()) {
					foreach ($stepNumbersNew as $stepNumber) {
						if ($stepNumber->id == $minDaily->id) {
							continue;
						}
						foreach (DailyMoneyEur::find()->whereShow()->andWhere(['<', 'range', $stepNumber->range])->andWhere(['!=', 'category', DailyMoneyEur::CATEGORY_PLAYGROUND_1])->all() as $d) {
							if (!$modelClone->getSteps()->whereClosures()->andWhere(['step' => $d->id])->count()) {
								Yii::$app->session->setFlash('message', 'Вам нужно закрыть все открытые площадки.');
								return $this->refresh();
							}
						}
					}
				}

				foreach ($stepNumbersNew as $stepNumber) {
					if ($data = $modelClone->createStep($stepNumber, $model, $clone)) {
						if ($message = ArrayHelper::getValue($data, 'message')) {
							Yii::$app->session->setFlash('message', $message);
							return $this->refresh();
						}
						if ($sum = ArrayHelper::getValue($data, 'price')) {
							$addPrice += $sum;
						}
					}
					$addCount++;
				}
			} elseif (!$modelClone->steps) {
				Yii::$app->session->setFlash('message', 'Вам надо купить все площадки!');
				return $this->refresh();
			}

			$user->freeze_eur = $user->getClonesEur()->sum('freeze');
			$user->save();

			if ($sponsorClone) {
				$sponsorClone->user->freeze_eur = $sponsorClone->user->getClonesEur()->sum('freeze');
				$sponsorClone->user->save();
			}

			return $this->refresh();
		}

		$model = new StepFormEur();
		$activeDaily = new DailyMoneyEur();

		if ($user->daily_step_eur) {
			$activeDaily = DailyMoneyEur::findOne(['id' => $user->daily_step_eur]);
		}

		$all_users_step = $out = [];
		$out_user = StepEur::find()->whereOwner()->andWhere(['step' => $user->daily_step_eur])->whereClosures(true)->all();
		$out_userNew = [];

		if ($activeDaily) {
			foreach ($out_user as $value) {
				$break = false;
				foreach (DailyMoneyEur::find()->whereShow()->andWhere(['>', 'range', $activeDaily->range])->all() as $dailyData) {
					if ($value->cloneOne && $value->cloneOne->getStepOne($dailyData->id)->count()) {
						$break = true;
						break;
					}
				}
				if (!$break) {
					$out_userNew[] = $value;
				}
			}
		}

		$out_user = $out_userNew;
		$clones = $dataClones = [];

		if ($activeClone) {
			foreach (Yii::$app->user->identity->getClonesEur()->all() as $c) {
				/**@var  $c UserCloneEur */
				if (!$c->getSteps()->count()) {
					continue;
				}
				$dataClones[$c->id] = $c->name;
			}
			$out = $activeClone->getStepOne($user->daily_step_eur)->one();
		}

		if ($user->clone_eur) {
			if ($clonesIds = $user->getClonesEur()->andWhere(['!=', 'name', $user->username])->select(['id'])->column()) {

				$clones = StepEur::find()->where(['clone' => $clonesIds])->andWhere(['step' => $user->daily_step_eur])->groupBy(['clone'])->all();
			}
		}

		return $this->render('daily-money-eur', [
			'model' => $model,
			'activeClone' => $activeClone,
			'clones' => $clones,
			'dailyes' => $dailyes,
			'dataClones' => $dataClones,
			'out' => $out,
			'out_user' => $out_user,
			'step_name' => $step_name,
			'step_price' => $step_price,
			'step_place' => $step_place,
			'users_step' => $all_users_step,

		]);
	}

}